// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best coconuts in town"
    const productPrice = web3.utils.toWei("0.1")
    var itemState = 0
    const manufacturerID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[0] ", accounts[1])
    console.log("Manufacturer: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    var _assertBufferOne = function(resultBufferOne, _sku, _upc, _ownerID, _originFarmerID, _originFarmName, _originFarmInformation, _originFarmLatitude, _originFarmLongitude) {
        assert.equal((resultBufferOne[0]).toNumber(), _sku, 'Error: Invalid item SKU')
        assert.equal((resultBufferOne[1]).toNumber(), _upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], _ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], _originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], _originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], _originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], _originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], _originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    }

    var _assertBufferTwo = function(resultBufferTwo, _sku, _upc, _productID, _productNotes, _productPrice, _itemState, _manufacturerID, _retailerID, _consumerID) {
        assert.equal((resultBufferTwo[0]).toNumber(), _sku, 'Error: Invalid item SKU')
        assert.equal((resultBufferTwo[1]).toNumber(), _upc, 'Error: Invalid item UPC')
        assert.equal((resultBufferTwo[2]).toNumber(), _productID, 'Error: Invalid productID')
        assert.equal(resultBufferTwo[3], _productNotes, 'Error: Invalid productNotes')
        assert.equal(resultBufferTwo[4], _productPrice, 'Error: Invalid product price')
        assert.equal((resultBufferTwo[5]).toNumber(), _itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], _manufacturerID , 'Error: manufacturerID should not be set at this point')
        assert.equal(resultBufferTwo[7], _retailerID, 'Error: retailerID should not be set at this point')
        assert.equal(resultBufferTwo[8], _consumerID, 'Error: consumerID should not be set at this point')
    }

    // 1st Test
    it("Testing smart contract function dairyItem() that allows a farmer to milk cow", async() => {
        const supplyChain = await SupplyChain.deployed()

        //Add Farmer
        let result_1 = await supplyChain.addFarmer(originFarmerID, {from: ownerID})
        
        // Mark an item as Milked by calling function dairyItem()
        let result_2 = await supplyChain.dairyItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(result_1.logs[0].event, "FarmerAdded")
        assert.equal(result_2.logs[0].event, "Milked")
        _assertBufferOne(resultBufferOne, sku, upc, originFarmerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude);
        _assertBufferTwo(resultBufferTwo, sku, upc, productID, productNotes, 0, itemState, emptyAddress, emptyAddress, emptyAddress)
    })
    
    // 2th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell milk", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as ForSale
        let result = await supplyChain.sellItem(upc, productPrice, {from: originFarmerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "ForSale")
        assert.equal(resultBufferTwo[4], web3.utils.toWei("0.1"))
        assert.equal((resultBufferTwo[5]).toNumber(), 1)
          
    })    

    // 3th Test
    it("Testing smart contract function buyItem() that allows a manufacturer to buy milk", async() => {
        const supplyChain = await SupplyChain.deployed()

        //Add Manufacturer
        let result_1 = await supplyChain.addManufacturer(manufacturerID, {from: ownerID})
        
        // Mark an item as Sold 
        let result_2 = await supplyChain.buyItem(upc, {from: manufacturerID, value: web3.utils.toWei("0.1")});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result_1.logs[0].event, "ManufacturerAdded") 
        assert.equal(result_2.logs[0].event, "Sold")
        assert.equal(resultBufferOne[2], manufacturerID)
        assert.equal((resultBufferTwo[5]).toNumber(), 2)
        assert.equal(resultBufferTwo[6], manufacturerID)
        
    })    

    // 4th Test
    it("Testing smart contract function shipItem() that allows a farmer to ship milk", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Shipped
        let result = await supplyChain.shipItem(upc, {from: originFarmerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "Shipped")
        assert.equal((resultBufferTwo[5]).toNumber(), 3)
              
    })    

    // 5th Test
    it("Testing smart contract function receiveItem() that allows a Manufacturer to mark milk received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Received
        let result = await supplyChain.receiveItem(upc, {from: manufacturerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "Received")
        assert.equal((resultBufferTwo[5]).toNumber(), 4)
             
    })

    // 6nd Test
    it("Testing smart contract function processItem() that allows a Manufacturer to process milk", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Processed
        let result = await supplyChain.processItem(upc, {from: manufacturerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "Processed")
        assert.equal((resultBufferTwo[5]).toNumber(), 5)
        
    })    

    // 7rd Test
    it("Testing smart contract function packItem() that allows a Manufacturer to pack dairy", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Packed
        let result = await supplyChain.packItem(upc, {from: manufacturerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "Packed")
        assert.equal((resultBufferTwo[5]).toNumber(), 6)
        
    })    

    // 8th Test
    it("Testing smart contract function sellItemByManufacturer() that allows a Manufacturer to sell dairy", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as ForSale
        let result = await supplyChain.sellItemByManufacture(upc, productPrice, {from: manufacturerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "ForSaleByManufacture")
        assert.equal(resultBufferTwo[4], web3.utils.toWei("0.1"))
        assert.equal((resultBufferTwo[5]).toNumber(), 7)
          
    })    

    // 9th Test
    it("Testing smart contract function buyItemByRetailer() that allows a retailer to buy dairy", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //Add Retailer
        let result_1 = await supplyChain.addRetailer(retailerID, {from: ownerID})
        
        // Mark an item as Sold 
        let result_2 = await supplyChain.buyItemByRetailer(upc, {from: retailerID, value: web3.utils.toWei("0.1")});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        assert.equal(result_1.logs[0].event, "RetailerAdded")  
        assert.equal(result_2.logs[0].event, "SoldByRetailer")
        assert.equal(resultBufferOne[2], retailerID)
        assert.equal((resultBufferTwo[5]).toNumber(), 8)
        assert.equal(resultBufferTwo[7], retailerID)
        
    })    

    // 10th Test
    it("Testing smart contract function shipItemByManufacturer() that allows a Manufacturer to ship dairy", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Shipped
        let result = await supplyChain.shipItemByManufacture(upc, {from: manufacturerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "ShippedByManufacture")
        assert.equal((resultBufferTwo[5]).toNumber(), 9)
              
    })    

    // 11th Test
    it("Testing smart contract function receiveItemByRetailer() that allows a retailer to mark dairy received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Received
        let result = await supplyChain.receiveItemByRetailer(upc, {from: retailerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "ReceivedByRetailer")
        assert.equal((resultBufferTwo[5]).toNumber(), 10)
             
    })    

    // 12th Test
    it("Testing smart contract function sellItemByRetailer() that allows a retailer to sell dairy", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as ForSale
        let result = await supplyChain.sellItemByRetailer(upc, productPrice, {from: retailerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(result.logs[0].event, "ForSaleByRetailer")
        assert.equal(resultBufferTwo[4], web3.utils.toWei("0.1"))
        assert.equal((resultBufferTwo[5]).toNumber(), 11)
          
    }) 

    // 13th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase dairy", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //Add Consumer
        let result_1 = await supplyChain.addConsumer(consumerID, {from: ownerID})
        
        // Mark an item as Sold 
        let result_2 = await supplyChain.purchaseItem(upc, {from: consumerID, value: web3.utils.toWei("0.1")});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        assert.equal(result_1.logs[0].event, "ConsumerAdded")  
        assert.equal(result_2.logs[0].event, "Purchased")
        assert.equal(resultBufferOne[2], consumerID)
        assert.equal((resultBufferTwo[5]).toNumber(), 12)
        assert.equal(resultBufferTwo[8], consumerID)
        
    })    

    // 14th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set
        _assertBufferOne(resultBufferOne, sku, upc, consumerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude);
 
    })

    // 15th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        _assertBufferTwo(resultBufferTwo, sku, upc, productID, productNotes, productPrice, 12, manufacturerID, retailerID, consumerID)
        
        
    })

});